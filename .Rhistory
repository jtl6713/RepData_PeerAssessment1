segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < | mrg$mean.y, ]
mrg[mrg$mean.x < mrg$mean.y, ]
setwd("E:/Cloud/Dropbox/School/Coursera/Data Science/Reproducible Research/Week 2/RepData_PeerAssessment1")
testing <- read.csv("activity.zip")
View(testing)
testing <- read.csv(unz("activity.zip"))
testing <- read.csv(unz("activity.zip","activity.csv"))
View(testing)
if(file.exists("activity.zip")){
if(!exists("activityData"){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
## Loading and preprocessing the data
if(!exists("activityData"){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
## Loading and preprocessing the data
if(file.exists("activity.zip")) {
if(!exists("activityData"){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
if(file.exists("activity.zip")) {
if(!exists("activityData"){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
## Loading and preprocessing the data
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
## Loading and preprocessing the data
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
head(activityData)
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsByDay)
hist(stepsByDay$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
hist(activityData$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
library(ggplot2)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500, geom="histogram"")
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500, geom="histogram")
dailySteps <- aggregate(steps ~ date, data, sum)
hist(dailySteps$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
rmean <- mean(dailySteps$steps)
dailySteps <- aggregate(steps ~ date, data, sum)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
rmean <- mean(dailySteps$steps)
library(ggplot2)
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
rmean <- mean(dailySteps$steps)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
rmean <- mean(dailySteps$steps)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, main = paste("Total Steps Each Day"), col="blue", xlab="Number of Steps")
rmean <- mean(dailySteps$steps)
hist(dailySteps$total,
breaks=seq(from=0, to=25000, by=2500),
col="blue",
xlab="Total number of steps",
ylim=c(0, 20),
main="Histogram of the total number of steps taken each day\n(NA removed)")
hist(dailySteps$steps,
breaks=seq(from=0, to=25000, by=2500),
col="blue",
xlab="Total number of steps",
ylim=c(0, 20),
main="Histogram of the total number of steps taken each day\n(NA removed)")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
interval.mean.steps <- ddply(dailySteps.ignore.na,~interval, summarise, mean=mean(steps))
library(plyr)
interval.mean.steps <- ddply(dailySteps.ignore.na,~interval, summarise, mean=mean(steps))
interval.mean.steps <- ddply(dailySteps,~interval, summarise, mean=mean(steps))
stepsInterval <- aggregate(steps ~ interval, dailySteps, mean)
View(activityData)
max_interval <- stepsInterval[which.max(stepsInterval$steps),1]
library(dplyr)
activityData <- mutate(activityData, day = weekdays(activityData$date))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r echo=TRUE}
library(ggplot2)
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
```
## What is mean total number of steps taken per day? (Ignore missing values)
* Calculate the total number of steps taken per day
```{r echo=TRUE}
dailySteps <- aggregate(steps ~ date, activityData, sum)
```
* Make a histogram of the total number of steps taken each day
```{r echo=TRUE}
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
```
* Calculate and report the mean and median of the total number of steps taken per day
```{r echo=TRUE}
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
```
* Mean: `r meanSteps`
* Median:  `r medianSteps`
## What is the average daily activity pattern?
* Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r echo=TRUE}
# Calculate average steps for each of 5-minute interval during a 24-hour period
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
plot(stepsInterval$interval,stepsInterval$steps, type="l", xlab="5 minute interval", ylab="Step count",main="Average Number of Steps by Interval")
```
* Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r echo=TRUE}
maxInterval <- stepsInterval[which.max(stepsInterval$steps),1]
```
The interval with the max number of steps across all days is `r maxInterval`
## Imputing missing values
* Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r echo=TRUE}
NAs <- sum(is.na(activityData$steps))
```
The total number of missing values is `r NAs`
* Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
```{r echo=TRUE}
# Need to first identify where the na's are.
na_idx <- which(is.na(activityData$steps))
# Now get the means where the indexes (not yet replacing)
meanOfTheIndexes <- rep(mean(activityData$steps, na.rm=TRUE), times=length(na_idx))
```
* Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r echo=TRUE}
# For comparison sake showing the data prior to replacement of the NA's
head(activityData)
```
```{r echo=TRUE}
# Now we replace the empty values of steps using the index as a locator and apply with the mean indexes
activityData[na_idx, "steps"] <- meanOfTheIndexes
```
```{r echo=TRUE}
# Showing the activity data after replacement
head(activityData)
```
* Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r echo=TRUE}
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day (NA's replaced by mean)"), col="blue", xlab="Step Count")
```
What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r echo=TRUE}
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
```
* Mean: `r meanSteps`
* Median:  `r medianSteps`
library(ggplot2)
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
?rm
rm(list = ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
plot(stepsInterval$interval,stepsInterval$steps, type="l", xlab="5 minute interval", ylab="Step count",main="Average Number of Steps by Interval")
maxInterval <- stepsInterval[which.max(stepsInterval$steps),1]
NAs <- sum(is.na(activityData$steps))
The total number of missing values is `r NAs`
na_idx <- which(is.na(activityData$steps))
meanOfTheIndexes <- rep(mean(activityData$steps, na.rm=TRUE), times=length(na_idx))
head(activityData)
activityData[na_idx, "steps"] <- meanOfTheIndexes
head(activityData)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day (NA's replaced by mean)"), col="blue", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
library(dplyr)
activityData <- mutate(activityData, day = weekdays(activityData$date))
?weekdays
weekdays(activityData$date)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- mutate(activityData, day = weekdays(activityData$date))
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
activityData$day <- factor((weekdays(activityData$date) %in% weekdays),
levels=c(FALSE, TRUE), labels=c('Weekend', 'Weekday'))
weekdays <- subset(activityData, day == "Weekday")
weekends <- subset(activityData, day == "Weekend")
weekendmeans <- with(weekends, tapply(steps, interval, mean))
weekdaymeans <- with(weekdays, tapply(steps, interval, mean))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r echo=TRUE}
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
```
## What is mean total number of steps taken per day? (Ignore missing values)
* Calculate the total number of steps taken per day
```{r echo=TRUE}
dailySteps <- aggregate(steps ~ date, activityData, sum)
```
* Make a histogram of the total number of steps taken each day
```{r echo=TRUE}
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
```
* Calculate and report the mean and median of the total number of steps taken per day
```{r echo=TRUE}
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
```
* Mean: `r meanSteps`
* Median:  `r medianSteps`
## What is the average daily activity pattern?
* Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r echo=TRUE}
# Calculate average steps for each of 5-minute interval during a 24-hour period
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
plot(stepsInterval$interval,stepsInterval$steps, type="l", xlab="5 minute interval", ylab="Step count",main="Average Number of Steps by Interval")
```
* Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r echo=TRUE}
maxInterval <- stepsInterval[which.max(stepsInterval$steps),1]
```
The interval with the max number of steps across all days is `r maxInterval`
## Imputing missing values
* Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r echo=TRUE}
NAs <- sum(is.na(activityData$steps))
```
The total number of missing values is `r NAs`
* Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
```{r echo=TRUE}
# Need to first identify where the na's are.
na_idx <- which(is.na(activityData$steps))
# Now get the means where the indexes (not yet replacing)
meanOfTheIndexes <- rep(mean(activityData$steps, na.rm=TRUE), times=length(na_idx))
```
* Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r echo=TRUE}
# For comparison sake showing the data prior to replacement of the NA's
head(activityData)
```
```{r echo=TRUE}
# Now we replace the empty values of steps using the index as a locator and apply with the mean indexes
activityData[na_idx, "steps"] <- meanOfTheIndexes
```
```{r echo=TRUE}
# Showing the activity data after replacement
head(activityData)
```
* Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r echo=TRUE}
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day (NA's replaced by mean)"), col="blue", xlab="Step Count")
```
What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r echo=TRUE}
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
```
* Mean: `r meanSteps`
* Median:  `r medianSteps`
*Do these values differ from the estimates from the first part of the assignment? Really no difference since we used the mean.  It just averaged out.
## Are there differences in activity patterns between weekdays and weekends?
activityData$day.type <- c("weekend", "weekday", "weekday",
"weekday", "weekday", "weekday", "weekend")[as.POSIXlt(activityData$date)$wday + 1]
activityData$day.type <- as.factor(activityData$day.type)
weekday <- activityData[activityData$day.type == "weekday", ]
weekend <- activityData[activityData$day.type == "weekend", ]
weekday.means <- as.numeric(tapply(weekday$steps, weekday$interval, mean))
weekend.means <- as.numeric(tapply(weekend$steps, weekend$interval, mean))
intervals.day.type <- data.frame(intervals = as.numeric(levels(data$interval)),
weekday.means, weekend.means)
intervals.day.type <- data.frame(intervals = as.numeric(levels(activityData$interval)),
weekday.means, weekend.means)
intervals.day.type <- data.frame(intervals = as.numeric(levels(activityData$interval)),
weekday.means, weekend.means)
intervals.day.type <- data.frame(intervals = as.numeric(levels(dailySteps$interval)),
weekday.means, weekend.means)
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday")
activityData <- mutate(activityData, day = weekdays(activityData$date))
weekdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
activityData$day <- factor((weekdays(activityData$date) %in% weekdays),
levels=c(FALSE, TRUE), labels=c('Weekend', 'Weekday'))
weekdays <- subset(activityData, day == "Weekday")
weekends <- subset(activityData, day == "Weekend")
weekendmeans <- with(weekends, tapply(steps, interval, mean))
weekdaymeans <- with(weekdays, tapply(steps, interval, mean))
weekendmeand
weekendmeans
plot(weekendmeans,weekdaymeans)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- data.frame(date=activityData$date,
weekday=tolower(weekdays(activityData$date)),
steps=activityData$steps,
interval=activityData$interval)
rm(list=ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- data.frame(date=activityData$date,
weekday=tolower(weekdays(activityData$date)),
steps=activityData$steps,
interval=activityData$interval)
rm(list=ls())
?rm
rm(list=ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- data.frame(date=activityData$date,
weekday=tolower(weekdays(activityData$date)),
steps=activityData$steps,
interval=activityData$interval)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- data.frame(date=activityData$date,
weekday=tolower(weekdays(activityData$date)),
steps=activityData$steps,
interval=activityData$interval)
activityData <- cbind(activityData,
daytype=ifelse(activityData$weekday == "saturday" |
activityData$weekday == "sunday", "weekend",
"weekday"))
head(activityData)
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
activityData <- data.frame(date=activityData$date,
weekday=tolower(weekdays(activityData$date)),
steps=activityData$steps,
interval=activityData$interval)
activityData <- cbind(activityData,
daytype=ifelse(activityData$weekday == "saturday" |
activityData$weekday == "sunday", "weekend",
"weekday"))
activityData <- data.frame(date=activityData$date,
weekday=activityData$weekday,
daytype=activityData$daytype,
interval=activityData$interval,
steps=activityData$steps)
mean_data <- aggregate(activityData$steps, by=list(activityData$daytype, activityData$weekday, activityData$interval), mean)
names(mean_data) <- c("daytype", "weekday", "interval", "mean")
library(lattice)
xyplot(mean ~ interval | daytype, mean_data,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
xyplot(mean ~ interval | daytype, mean_data,
type="l",
xlab="Interval",
ylab="Number of steps",
layout=c(1,2))
# Clear all objects
rm(list=ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
# Rrebuild the data frame to include days of the week and flagged as weekday or weekend for later processing
activityData <- data.frame(date=activityData$date, weekday=tolower(weekdays(activityData$date)), steps=activityData$steps, interval=activityData$interval)
activityData <- cbind(activityData, daytype=ifelse(activityData$weekday == "saturday" | activityData$weekday == "sunday", "weekend", "weekday"))
activityData <- data.frame(date=activityData$date, weekday=activityData$weekday, daytype=activityData$daytype, interval=activityData$interval, steps=activityData$steps)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
# Calculate average steps for each of 5-minute interval during a 24-hour period
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
png('figure/unnamed-chunk-5-1.png')
# Clear all objects
rm(list=ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
# Rrebuild the data frame to include days of the week and flagged as weekday or weekend for later processing
activityData <- data.frame(date=activityData$date, weekday=tolower(weekdays(activityData$date)), steps=activityData$steps, interval=activityData$interval)
activityData <- cbind(activityData, daytype=ifelse(activityData$weekday == "saturday" | activityData$weekday == "sunday", "weekend", "weekday"))
activityData <- data.frame(date=activityData$date, weekday=activityData$weekday, daytype=activityData$daytype, interval=activityData$interval, steps=activityData$steps)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
# Calculate average steps for each of 5-minute interval during a 24-hour period
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
plot(stepsInterval$interval,stepsInterval$steps, type="l", xlab="5 minute interval", ylab="Step count",main="Average Number of Steps by Interval")
maxInterval <- stepsInterval[which.max(stepsInterval$steps),1]
NAs <- sum(is.na(activityData$steps))
# I will be simply finding the averages to fill in the missing values
# Need to first identify where the na's are.
na_idx <- which(is.na(activityData$steps))
# Now get the means where the indexes (not yet replacing)
meanOfTheIndexes <- rep(mean(activityData$steps, na.rm=TRUE), times=length(na_idx))
# For comparison sake showing the data prior to replacement of the NA's
head(activityData)
# Now we replace the empty values of steps using the index as a locator and apply with the mean indexes
activityData[na_idx, "steps"] <- meanOfTheIndexes
# Showing the activity data after replacement
head(activityData)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day (NA's replaced by mean)"), col="red", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
library(lattice)
mean_data <- aggregate(activityData$steps, by=list(activityData$daytype, activityData$weekday, activityData$interval), mean)
# Rename the attributes
names(mean_data) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, mean_data,
type="l", layout=c(1,2), lwd=1,
main = "Avg steps by interval", xlab="Interval", ylab="Number of steps")
# It appears that during the weekend the steps ramp up earlier in the day.
# Clear all objects
rm(list=ls())
if(file.exists("activity.zip")) {
if(!exists("activityData")){
activityData <- read.csv(unz("activity.zip","activity.csv"))
}
}
# Let's prepare the dates for later processing
activityData$date <- as.Date(activityData$date, "%Y-%m-%d")
# Rrebuild the data frame to include days of the week and flagged as weekday or weekend for later processing
activityData <- data.frame(date=activityData$date, weekday=tolower(weekdays(activityData$date)), steps=activityData$steps, interval=activityData$interval)
activityData <- cbind(activityData, daytype=ifelse(activityData$weekday == "saturday" | activityData$weekday == "sunday", "weekend", "weekday"))
activityData <- data.frame(date=activityData$date, weekday=activityData$weekday, daytype=activityData$daytype, interval=activityData$interval, steps=activityData$steps)
dailySteps <- aggregate(steps ~ date, activityData, sum)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day"), col="blue", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
# Calculate average steps for each of 5-minute interval during a 24-hour period
stepsInterval <- aggregate(steps ~ interval, activityData, mean)
plot(stepsInterval$interval,stepsInterval$steps, type="l", xlab="5 minute interval", ylab="Step count",main="Average Number of Steps by Interval")
maxInterval <- stepsInterval[which.max(stepsInterval$steps),1]
NAs <- sum(is.na(activityData$steps))
# I will be simply finding the averages to fill in the missing values
# Need to first identify where the na's are.
na_idx <- which(is.na(activityData$steps))
# Now get the means where the indexes (not yet replacing)
meanOfTheIndexes <- rep(mean(activityData$steps, na.rm=TRUE), times=length(na_idx))
# For comparison sake showing the data prior to replacement of the NA's
head(activityData)
# Now we replace the empty values of steps using the index as a locator and apply with the mean indexes
activityData[na_idx, "steps"] <- meanOfTheIndexes
# Showing the activity data after replacement
head(activityData)
hist(dailySteps$steps, breaks=seq(from=0, to=25000, by=1500), main = paste("Steps per day (NA's replaced by mean)"), col="red", xlab="Step Count")
meanSteps <- mean(dailySteps$steps)
medianSteps <- median(dailySteps$steps)
library(lattice)
mean_data <- aggregate(activityData$steps, by=list(activityData$daytype, activityData$weekday, activityData$interval), mean)
# Rename the attributes
names(mean_data) <- c("daytype", "weekday", "interval", "mean")
xyplot(mean ~ interval | daytype, mean_data,
type="l", layout=c(1,2), lwd=1,
main = "Avg steps by interval", xlab="Interval", ylab="Number of steps")
# It appears that during the weekend the steps ramp up earlier in the day.
